<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://oweixx.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://oweixx.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-31T10:32:59+00:00</updated><id>https://oweixx.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">랜덤 마라톤 코스(41,42)</title><link href="https://oweixx.github.io/blog/2025/marathon_42_41/" rel="alternate" type="text/html" title="랜덤 마라톤 코스(41,42)"/><published>2025-03-30T00:00:00+00:00</published><updated>2025-03-30T00:00:00+00:00</updated><id>https://oweixx.github.io/blog/2025/marathon_42_41</id><content type="html" xml:base="https://oweixx.github.io/blog/2025/marathon_42_41/"><![CDATA[<p>지금까지 풀지 못했었던 랜덤 마라톤 문제들을 조금씩 풀어보려고 한다.</p> <p>이전에 풀지 못했었던 코스 41,42의 골드 문제 4문제를 풀어보았다.</p> <p>3/30 (일) 카페에서 약 2시간 이상 풀이를 하였다.</p> <p><br/></p> <h4 id="22862-가장-긴-짝수-연속한-부분-수열-large"><a href="https://www.acmicpc.net/problem/22862">22862 가장 긴 짝수 연속한 부분 수열 (large)</a></h4> <p>Gold 5 난이도의 가장 긴 짝수 연속한 부분 수열을 구하는 문제이다.</p> <p>문제를 보았을 때 유형 중 하나인 증가하는 부분 수열 결의 문제라고 생각하고 DP로 접근했다가 실패하고 문제 유형을 통해 <code class="language-plaintext highlighter-rouge">투 포인터</code>유형의 문제라는 것을 알고 투 포인터로 접근하였다.</p> <p>해당 문제를 투포인터로 접근하는 방법을 생각해보자.</p> <p>$s$와 $e$를 어떻게 이용할 것이냐가 투포인터의 정수라고 생각한다. 해당 문제의 성질을 보면 결국 가장 긴 길이를 구해야하는 것이 목표이며 이를 위해선 $e$는 끝까지 진행을 해야하며 $s$는 조건에 맞게 따라오는 Logic으로 구성해야 할 것이다.</p> <p>만약 e가 앞으로 쭉쭉 진행을 하면서 해당 부분이 홀수라면 $cnt$를 1 올려주고 $cnt$가 조건에 맞는 K개 이상이 되었을 경우 해당 조건에 맞을 수 있을 때 까지 s를 증가시켜준다.</p> <p>결국 구해야하는 <strong>가장 긴 짝수 연속한 부분 수열</strong>은 현재 길이 $e-s+1$에서 홀수의 개수 $cnt$를 빼준</p> \[result = (e-s+1-cnt)\] <p>로 정의된다.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="c1"># 길이가 N인 수열 S
# 짝수로 이루어진 연속한 부분 수열 중 가장 긴 길이
</span>
<span class="n">n</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
<span class="n">arr</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">()))</span>

<span class="n">s</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
<span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">ml</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">s</span> <span class="o">&lt;=</span> <span class="n">e</span> <span class="ow">and</span> <span class="n">e</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">:</span>
    <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">:</span>
        <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">while</span> <span class="n">cnt</span> <span class="o">&gt;</span> <span class="n">k</span> <span class="p">:</span>
        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">:</span>
            <span class="n">cnt</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="n">ml</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">ml</span><span class="p">,</span> <span class="n">e</span><span class="o">-</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="o">-</span><span class="n">cnt</span><span class="p">)</span>
    <span class="n">e</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="nf">print</span><span class="p">(</span><span class="n">ml</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h4 id="2240-자두나무"><a href="https://www.acmicpc.net/problem/2240">2240 자두나무</a></h4> <p>Gold 5난이도의 T초동안 최대 W번 움직이며 받을 수 있는 자두의 최대 개수를 출력하는 문제이다.</p> <p>문제 의도 자체는 DP라는게 명확히 보이는 문제였지만 점화식을 처음에 명확히 파악하는게 어려웠었다.</p> <p>dp를 설정할 때 i,j,k를 다음과 같이 설정하였다.</p> <ul> <li>i : N초</li> <li>j : W번 자리 이동</li> <li>k : 현재 자리 (1 or 2)</li> </ul> <p>만약 현재 자리와 떨어지는 자두의 자리와 같다면 다음 점화식과 같다.</p> \[dp[i][j][k] = dp[i-1][j][k] + 1\] <p>만약 현재 자리와 떨어지는 자두의 자리가 다르다면 점화식은 다음과 같다.</p> \[dp[i][j][k] = max(dp[i-1][j][k], dp[i-1][j-1][1-k] + 1)\] <p>추가로 처음 자두는 1번 자두나무 아래에 위치해 있다는 것을 주의해야 한다.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span><span class="p">,</span> <span class="n">w</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="n">cur</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">dp</span> <span class="o">=</span> <span class="p">[[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">w</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>


<span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">:</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">else</span> <span class="p">:</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="p">:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">w</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span>
            <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="o">-</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="k">else</span> <span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span>

<span class="n">_max</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">w</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span>
            <span class="n">_max</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">_max</span><span class="p">,</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">_max</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h4 id="5980-corn-maze"><a href="https://www.acmicpc.net/problem/5980">5980 Corn Maze</a></h4> <p>Gold 4 난이도의 Grpah 탐색 문제이다. 딱봐도 BFS Search 문제이지만 주의 할 부분은 Slide라고 하는 경로 이동 Trigger가 추가 되었다는 것이다.</p> <p>전체적으로 기본적인 BFS와 같이 시작점에서 이동할 수 있는 방향으로 이동한다. Slide Trigger를 만날 경우 해당 지점을 방문배열에 Check하고 도착하여 연결된 부분에서는 방문배열을 Check하지 않는다.</p> <p>위와 같은 방법으로 해야하는 경우가 발생하게 되는데, 예를 들어 S -&gt; S’로 이동하고 S’ -&gt; S로도 이동이 가능해야 하는 경우가 있기 때문이다. 해당 반례는 아래와 같다.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6 6
###=##
#.WV##
#K####
#V.W##
#.K.@#
######
</code></pre></div></div> <p>재미있는 문제인 것 같다.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span><span class="p">,</span> <span class="n">deque</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">q</span> <span class="o">=</span> <span class="nf">deque</span><span class="p">()</span>
    <span class="n">q</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
    <span class="n">check</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">while</span> <span class="n">q</span> <span class="p">:</span>
        <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">cnt</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">popleft</span><span class="p">()</span>
        <span class="c1">#print(x,y)
</span>        <span class="nf">if </span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="n">end</span> <span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
            <span class="nf">exit</span><span class="p">()</span>

        <span class="k">for</span> <span class="n">dx</span><span class="p">,</span><span class="n">dy</span> <span class="ow">in</span> <span class="p">[(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)]</span> <span class="p">:</span>
            <span class="n">nx</span><span class="p">,</span><span class="n">ny</span> <span class="o">=</span> <span class="n">x</span><span class="o">+</span><span class="n">dx</span><span class="p">,</span><span class="n">y</span><span class="o">+</span><span class="n">dy</span>
            <span class="k">if</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">nx</span><span class="o">&lt;</span><span class="n">n</span> <span class="ow">and</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="n">ny</span><span class="o">&lt;</span><span class="n">m</span> <span class="ow">and</span> <span class="n">maps</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">#</span><span class="sh">'</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">check</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">maps</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">].</span><span class="nf">isalpha</span><span class="p">()</span> <span class="p">:</span>
                    <span class="n">lst</span> <span class="o">=</span> <span class="n">tp</span><span class="p">[</span><span class="n">maps</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]]</span>
                    <span class="n">another</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">px</span><span class="p">,</span><span class="n">py</span> <span class="ow">in</span> <span class="n">lst</span> <span class="p">:</span>
                        <span class="nf">if </span><span class="p">(</span><span class="n">px</span><span class="p">,</span><span class="n">py</span><span class="p">)</span> <span class="o">!=</span> <span class="p">(</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">)</span> <span class="p">:</span>
                            <span class="n">another</span> <span class="o">=</span> <span class="p">(</span><span class="n">px</span><span class="p">,</span><span class="n">py</span><span class="p">)</span>
                    <span class="n">check</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="n">nx</span><span class="p">,</span><span class="n">ny</span> <span class="o">=</span> <span class="n">another</span>
                    <span class="c1">#check[nx][ny] = True
</span>                    <span class="n">q</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">,</span> <span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>

                <span class="k">else</span> <span class="p">:</span>
                    <span class="n">check</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="n">q</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">,</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>


<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
<span class="n">maps</span> <span class="o">=</span> <span class="p">[</span><span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">strip</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="n">check</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>

<span class="n">tp</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
<span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="n">end</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">:</span>
        <span class="k">if</span> <span class="n">maps</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="nf">isalpha</span><span class="p">()</span> <span class="p">:</span>
            <span class="n">tp</span><span class="p">[</span><span class="n">maps</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]].</span><span class="nf">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">maps</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">@</span><span class="sh">'</span> <span class="p">:</span>
            <span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">maps</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">=</span><span class="sh">'</span> <span class="p">:</span>
            <span class="n">end</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
<span class="nf">bfs</span><span class="p">(</span><span class="n">start</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">start</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h4 id="29616-인기-투표"><a href="https://www.acmicpc.net/problem/29616">29616 인기 투표</a></h4> <p>잘 몰겠다.. 어렵다… 접근법이… 어렵다…</p> <p><br/></p>]]></content><author><name></name></author><category term="PS"/><category term="PS"/><summary type="html"><![CDATA[랜덤 마라톤 코스(41,42)]]></summary></entry><entry><title type="html">3월 월간 회고</title><link href="https://oweixx.github.io/blog/2025/monthly_review_2503/" rel="alternate" type="text/html" title="3월 월간 회고"/><published>2025-03-30T00:00:00+00:00</published><updated>2025-03-30T00:00:00+00:00</updated><id>https://oweixx.github.io/blog/2025/monthly_review_2503</id><content type="html" xml:base="https://oweixx.github.io/blog/2025/monthly_review_2503/"><![CDATA[<p>이번 3월 달도 오늘 주말까지 해서 2일 남았다.</p> <p>생각보다 나는 이번 달이 꽤나 길었다고 느껴졌었는데 왜인지는 모르겠다.</p> <p>3월의 목표를 글로 정리한적이 없었기에 이번 달을 정리함과 동시에 다음달의 Self-Motivate를 다시 한 번 상기시키기위해 글로 정리해본다.</p> <hr/> <h3 id="monthly-review"><strong>Monthly Review</strong></h3> <p>먼저 이번달을 간단하게 글로 정리해보고자 한다.</p> <p>이번달의 가장 큰 이벤트라고 한다면 당연히 미루고 미루었던(?) 복학이다. 이번 25-1학기에 3학년에 복학하면서 보통에 비해 2년 늦은 학업을 다니고 있다.</p> <p>사실 2년이 늦건 몇년이 늦건 크게 개의치 않다. 그간 2년동안 경험하고 이루어냈던 것들이 지금의 나를 이루어내는데 지대한 영향을 주었기 때문이다. 어린시절의 영향 70, 이번 2년의 20, 특정하기 어려운 10…. 이렇게 합쳐져 100의 내가 되었다고 생각한다.</p> <p>하여간, 정리해서 이번달을 Keyword로 살펴보도록 하자.</p> <h4 id="학점gpa"><strong>학점(GPA)</strong></h4> <p>이번 복학을 하면서 가장 크게 신경쓰는 것 중 하나로 대학원을 들어가기 위한 좋은 학점 챙기기 였다. 나에게 학점이라하면…. 사실은 지금 하던대로 하면 충분히 잘 챙길 수 있지 않을까라는 안일한 생각으로 정의가 되어있다. 비교적 널널하기도 했었던 1,2 학년을 생각해보면 지금만큼 공부를 하지 않았음에도 ‘왜 이렇게 학점이 나오지?…‘라고 할 정도로 꽤나 순방했었기 때문이다.</p> <p>하지만 이번 학기 본전공 5개 타전공(수학과) 1개해서 전공수업 6개를 수업을 들어보니 ‘아 이거 안일한 정신상태로 공부하면 큰일나겠다.’라는 경각심이 순간 들었었다. 현재 위기감을 느끼고 있는 수업으로는 운영체제, AI 기초수학, 컴퓨터비전 이렇게 3개이다. 사실 어려워서 경각심이 들기보다는 흥미가 별로 없기 때문에 자연스럽게 소훌해지면서 나중에 경각심이 든 친구들이다.</p> <p>현재 학점이 막 나쁜편은 아니지만 사실 내 기준에서는 크게 만족스럽지 않은 학점과 석차이다. 이전과 다르게 목표의식이 있기 때문에 지금처럼 열심히 하면 좋은 학점을 받을 수 있지 않을까 싶다. 그냥 다시 한 번 스스로에게 말하고 싶은 말은 <code class="language-plaintext highlighter-rouge">안일하지 말자.</code> 이다.</p> <h4 id="algorithm"><strong>Algorithm</strong></h4> <p>학교 수업이 크게 재미있지 않아서 그런지 초반에 꽤나 빠르게 열심히 알고리즘을 달렸다.</p> <p>solved.ac 기준으로 3월 초 1843점으로 P3 중반이었지만 현재는 2112로 P1 하위 구간에 도달하였다. 사실 최대유량(Network Flow)유형 문제가 너무 재밌어서 관련 문제들을 너무 재밌게 풀다보니 여기에 도달한 것 같다.(Graph가 진짜 재밌다…..)</p> <p>현재로써 조금 느끼는 부분은 이전만큼 PS에 시간을 투자하기는 어렵지 않을까 라는 생각이다. 기존 목표였던 대학원을 목표로 두고있는 만큼 연구적인 부분에서의 활동을 더 해야하지 않을까 라는 생각이 최근에서 조금씩 들기 시작했다. 현실을 직시했달까?…</p> <p>그래서 현재는 방향성을 점수를 올리기보다는 골드 수준의 문제들을 꾸준히 풀면서 전체적인 알고리즘의 감을 높이려고 한다. 주 컨텐츠로는 solved.ac의 마라톤을 할 것 같고 추가적으로 수학적인 문제에 손을 대지 않을까 라는 생각이다. 더 자세한 계획으로는 이후에 작성해야겠다.</p> <h4 id="college-life"><strong>College Life</strong></h4> <p>종합적인 학교 생활이다. 사실 지금 매우 개인적인 학교 생활을 보내고 있기 때문에 너무나도 편하고 자유롭다고 총평 할 수 있다. 내가 이상적으로 생각했던 학교 생활이다.</p> <p>다만 아쉬운건, 비슷한 마인드를 가진 친구가 한명 있으면 좋지 않을까 라는 부분이었는데 아직 많은 사람들을 만나보지 않았기도 하고 이런 부분을 알기 위해서는 deep하게 들어가야 하기 때문에 아직 발견하지 못해서 아쉬운 것 같다.</p> <p>큰 이변이 없다면 현재와 같은 Routine으로 학교를 쭉 다닐 것 같다. 사실 Routine에 짜잘한 변수들에 큰 스트레스를 받는 나로써 지금 굉장히 만족스럽기 때문에 이상한 사건이나 사람이 안 꼬였으면 좋겠다는 바람 뿐이다. 물론 그게 나일수도 있긴하다….</p> <p><br/></p> <hr/> <h2 id="future"><strong>Future</strong></h2> <h3 id="goal"><strong>Goal</strong></h3> <ul> <li>4월은 중간고사가 있는 달이다. 0순위로 학점을 잘 받아야 한다.</li> <li>4월부터 시험체제 Routine을 꾸리고 행동하자.</li> <li>운영체제, 컴퓨터비전, AI 기초수학에 시간을 조금 할애해보자.</li> <li>학부연구생 참여를 해보자.</li> <li>주 1논문 읽고 Review하는 Routine을 추가하자.</li> </ul> <h3 id="try"><strong>Try</strong></h3> <ul> <li>학부연구생 contac 꾸준히 하기.</li> <li>틈틈이 좋은 인재(?)를 탐색해보자.</li> <li>담당 지도교수님께 연구 활동 의지에 대한 어필을 해보자.</li> <li>과제는 최대한 빠르게 쳐내고 해결하는 과정을 오래가져가기.</li> </ul> <h3 id="mindset"><strong>Mindset</strong></h3> <ul> <li>오늘 느꼈음. 잃을 것 없는 사람마냥 생각해야 그제서야 용감하게 행동한다.</li> <li>실패를 두려워하지말자.</li> <li>문제건 과제건 어떤 어려움이건 내 힘으로 온전히 해결하는 과정을 소중히 여겨보자.</li> <li>스스로에게 의지하는 습관을 들여보자(?)</li> <li>항상 안일하지말고, 어제보다 더 열심히 사는 것을 오늘 하루의 목표로 두자.</li> </ul> <h3 id="conclusion"><strong>Conclusion</strong></h3> <p>이번 달을 정리해보니 꽤나 열심히 살았던 것 같다.</p> <p>다음달도 늘 그렇듯이 잘해보자.</p>]]></content><author><name></name></author><category term="회고"/><category term="회고"/><summary type="html"><![CDATA[월간 회고]]></summary></entry><entry><title type="html">랜덤 마라톤 코스(43)</title><link href="https://oweixx.github.io/blog/2025/marathon_43/" rel="alternate" type="text/html" title="랜덤 마라톤 코스(43)"/><published>2025-03-29T00:00:00+00:00</published><updated>2025-03-29T00:00:00+00:00</updated><id>https://oweixx.github.io/blog/2025/marathon_43</id><content type="html" xml:base="https://oweixx.github.io/blog/2025/marathon_43/"><![CDATA[<p>이번 주 solved.ac 랜덤 마라톤 문제들의 간단한 풀이이다. 25.03.29 카페에서 본공부 전 간단하게 진행하였다.</p> <p><br/></p> <h4 id="9947-coin-tossing">9947 Coin tossing</h4> <p>Bronze 2 난이도의 문제로 매우 간단한 문제였다.</p> <p>입력으로 들어오는 n개의 H,T에 대하여 같은 경우 앞 사람이 점수를 먹고, 다르면 뒷 사람이 점수를 먹는 형식이다.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="k">while</span> <span class="bp">True</span> <span class="p">:</span>
    <span class="n">_in</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">()))</span>
    <span class="k">if</span> <span class="n">_in</span> <span class="o">==</span> <span class="p">[</span><span class="sh">'</span><span class="s">#</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">#</span><span class="sh">'</span><span class="p">]:</span>
        <span class="nf">exit</span><span class="p">()</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span>
    <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span> <span class="p">:</span>
            <span class="n">y</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">_in</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">_in</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">y</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h4 id="31738-매우-어려운-문제">31738 매우 어려운 문제</h4> <p>정수 N,M에 대하여 N! % M을 구하는 문제이다.</p> <p>처음에 정말 단순히 <code class="language-plaintext highlighter-rouge">math.factorial(n) % m</code>을 통해 풀었다가 너무 당연하게도 시간초과를 받았다.</p> <p>문제의 제한을 보면 N이 $10^{18}$, M이 $10^{17}$인 것을 확인할 수 있다. 간단한 DP를 통해 나머지를 관리해주자.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">math</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
<span class="k">if</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="n">m</span> <span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="nf">exit</span><span class="p">()</span>
<span class="k">else</span> <span class="p">:</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span><span class="o">%</span><span class="n">m</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h4 id="5078-shirts">5078 Shirts</h4> <p>셔츠들을 입력을 받아서 사이즈, 색깔 별로 정렬하여 출력하는 간단한 문제였다.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="k">while</span> <span class="bp">True</span> <span class="p">:</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">n</span> <span class="p">:</span>
        <span class="c1"># work
</span>        <span class="nf">exit</span><span class="p">()</span>
    
    <span class="n">shirts</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">input</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>
        <span class="n">shirts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">input</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>
        <span class="n">shirts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">shirts</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="p">(</span><span class="o">-</span><span class="nf">ord</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nf">ord</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
    <span class="nf">print</span><span class="p">(</span><span class="o">*</span><span class="n">shirts</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h4 id="1448-삼각형-만들기">1448 삼각형 만들기</h4> <p>괜찮은 함정(?) 문제 였다.</p> <p>괜찮다고 생각했던 부분중 하나는 <code class="language-plaintext highlighter-rouge">세 변의 길이의 합이 최댓값을 구하고 싶다.</code> 라는 부분과 삼각형을 이룰 수 있는 성질이 합쳐지면 매우 Greedy한 문제로 변한다는 부분이었다.</p> <p>결국</p> \[a + b &gt; c, a + c &gt; b, b + c &gt; a\] <p>를 만족해야 하는 것이며 단순히 정렬하여 맨 위 index부터 연속된 3개의 숫자가 삼각형을 이룰 수 있는 조건인지 찾으면 되는 매우 간단한 문제로 변한다.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span>
<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="n">arr</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">:</span>
    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="n">c</span> <span class="ow">and</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="n">a</span> <span class="ow">and</span> <span class="n">a</span> <span class="o">+</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="p">)</span>
        <span class="nf">exit</span><span class="p">()</span>
    <span class="k">else</span> <span class="p">:</span>
        <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="nf">print</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h4 id="18126-너구리-구구">18126 너구리 구구</h4> <p>무려 7번이나 틀린 문제이다…</p> <p>총 1부터 N개로 N개의 방으로 이루어진 곳에서 N-1개의 길로 서로 오갈 수 있다고 한다. 이 때 입구에서 가장 먼 방에 아이스크림을 숨기려고 한다.</p> <p>당연히 가장 멀다길래 N번방 까지의 거리일 줄 알았지만 길들의 거리를 모두 계산하고 1번부터 가장 멀리 떨어진 방까지의 거리를 출력하는 것이 문제였다.</p> <p>왜 틀렸지? 라는 생각이 든다면 문제를 다시 한 번 확인해보자.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span><span class="p">,</span> <span class="n">heapq</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">start</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">heap</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">heapq</span><span class="p">.</span><span class="nf">heappush</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="p">))</span>

    <span class="k">while</span> <span class="n">heap</span> <span class="p">:</span>
        <span class="n">cost</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="nf">heappop</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">cost</span> <span class="o">&gt;</span> <span class="n">dist</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="p">:</span>
            <span class="k">continue</span>

        <span class="k">for</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ncost</span> <span class="ow">in</span> <span class="n">edge</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="p">:</span>
            <span class="n">next_cost</span> <span class="o">=</span> <span class="n">cost</span> <span class="o">+</span> <span class="n">ncost</span>
            <span class="k">if</span> <span class="n">dist</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">next_cost</span> <span class="p">:</span>
                <span class="n">dist</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span> <span class="o">=</span> <span class="n">next_cost</span>
                <span class="n">heapq</span><span class="p">.</span><span class="nf">heappush</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="p">(</span><span class="n">next_cost</span><span class="p">,</span> <span class="n">nx</span><span class="p">))</span>
<span class="n">edge</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
<span class="n">dist</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1e20</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
<span class="n">dist</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">dist</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
    <span class="n">edge</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="nf">append</span><span class="p">((</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">))</span>
    <span class="n">edge</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="nf">append</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">c</span><span class="p">))</span>
<span class="nf">bfs</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="n">dist</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h4 id="2784-가로-세로-퍼즐">2784 가로 세로 퍼즐</h4> <p>실버2 같은 느낌은 아니었지만 이번에도 꽤 괜찮은 문제였다.</p> <p>6개의 단어가 주어지면 해당 6개의 단어로 $3X3$ 가로 세로 퍼즐을 만들 수 있냐라는 문제이다.</p> <p>입력으로 주어지는 단어 수가 6개로 고정되어 있고 6개중 3개로 단어의 경우의 수를 뽑는 것은 시간적으로 매우 여유있기 때문에 permutations을 이용해 뽑아주었다.</p> <p>괜찮다고 생각했던 부분은 그냥 재밌었기 때문이다.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">permutations</span> <span class="k">as</span> <span class="n">pm</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">word</span> <span class="o">=</span> <span class="p">[</span><span class="nf">input</span><span class="p">().</span><span class="nf">rstrip</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span><span class="p">)]</span>
<span class="n">lst</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">pm</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span> <span class="mi">3</span><span class="p">))</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst</span> <span class="p">:</span>
    <span class="n">another</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">org</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">i</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">j</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">i</span> <span class="p">:</span>
            <span class="n">another</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
    <span class="n">vertical</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="sh">''</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span>
            <span class="n">tmp</span> <span class="o">+=</span> <span class="n">org</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
        <span class="n">vertical</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
    <span class="n">vertical</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span>
        <span class="k">if</span> <span class="n">vertical</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">another</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">:</span>
            <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">cnt</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">:</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">i</span> <span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">row</span><span class="p">])</span>
        <span class="nf">exit</span><span class="p">()</span>
    
<span class="nf">print</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h4 id="14426-접두사-찾기">14426 접두사 찾기</h4> <p>실버1 트라이 문제이지만 단순히 접두사로 올 수 있는 모든 경우의 수를 set형에 넣어두고 check하는 것으로도 풀이가 가능하였다.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>

<span class="n">c</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="nf">input</span><span class="p">().</span><span class="nf">rstrip</span><span class="p">()</span>
    <span class="n">t</span> <span class="o">=</span> <span class="sh">''</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">s</span> <span class="p">:</span>
        <span class="n">t</span> <span class="o">+=</span> <span class="n">j</span>
        <span class="n">c</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="nf">input</span><span class="p">().</span><span class="nf">rstrip</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">c</span> <span class="p">:</span>
        <span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h4 id="25343-최장-최장-증가-부분-수열">25343 최장 최장 증가 부분 수열</h4> <p>Gold 5 난이도의 LIS(Longest Increasing Subsequence) 문제이다.</p> <p>최장 부분 수열의 문제를 2차원 version인데 다행히도 난이도를 낮추기 위한 최단거리라는 제한이 주어져 있다. (사실 최단거리가 아니면 어떻게 될지 난 모르긴함.)</p> <p>기본 LIS의 틀인 DP를 통해 이전의 값들 보다 크다면 해당 DP를 업데이트 하는 방식 이었다. 점화식으로 보자면</p> \[dp[i] = max(dp[i], dp[j] + 1) \quad if \quad (arr[i] &gt; arr[j] \quad and \quad i &gt; j)\] <p>약간 헷갈릴 수 있는 부분으로 원래 1차원 LIS의 공식은 $i = range(1,n)$, $j = range(i)$ 였었다. 하지만 2차원 LIS에서 바뀐 이유는 같은 열 같은 행이면서 이전의 값이 있을 수 있기 때문에 범위를 아래 코드와 같이 수정해줘야 한다는 부분이다. 이부분은 재미있으면서도 좋은 부분인 것 같다.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span>
<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>

<span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">t</span><span class="p">]</span> <span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">t</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="nf">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>

<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="PS"/><category term="PS"/><summary type="html"><![CDATA[랜덤 마라톤 코스(43)]]></summary></entry><entry><title type="html">뤼카의 정리</title><link href="https://oweixx.github.io/blog/2025/Lucas_theorem/" rel="alternate" type="text/html" title="뤼카의 정리"/><published>2025-03-27T00:00:00+00:00</published><updated>2025-03-27T00:00:00+00:00</updated><id>https://oweixx.github.io/blog/2025/Lucas_theorem</id><content type="html" xml:base="https://oweixx.github.io/blog/2025/Lucas_theorem/"><![CDATA[<p>더 어려운 수학 category를 들어가기에 앞서 뤼카의 정리를 한 번 살펴보고자 한다.</p> <p>뤼카의 정리는 어떤 조합의 수를 소수 p에 대해 법 p 상에서 구할 때 간편한 계산 방식을 제공한다. 다시 말해 <code class="language-plaintext highlighter-rouge">작은 값들의 조합을 통해 해를 빠르게 계산</code>할 수 있다.</p> <p><br/></p> <h4 id="공식화">공식화</h4> <p>임의의 음이 아닌 정수 m과 n, 소수 p에 대하여 뤼카의 정리는 다음과 같이 합동식으로 표현할 수 있다.</p> \[\binom {m}{n} \equiv \prod_{i=0}^{k}{\binom{m_i}{n_i} \pmod p}\] <p>여기서 첨자가 붙은 수들은 m과 n을 소수 p에 대해 다음과 같이 p진법으로 전개했을 때 얻어지는 것들이다.</p> <ol> <li>$m=m_kp^k+m_{k-1}p^{k-1}+\cdots+m_1p+m_0,$</li> <li>$n=n_kp^k+n_{k-1}p^{k-1}+\cdots+n_1p+n_0$</li> </ol> <p>이상과 같은 뤼카의 정리는 임의의 자연수 q에 대해 법 p의 q제곱 형태로 일반화가 가능하다.</p> <p><br/></p> <h4 id="증명">증명</h4> <h5 id="1-다항식-증명">1. 다항식 증명</h5> \[(1+x)^p\] <p>해당 식에 대하여</p> \[(1+x)^p = \binom p 0 + \binom p 1 x + \binom p 2 x^2 + \cdots + \binom p p x^p\] <p>위의 식으로 표현이 가능하고 이는 $\binom p 1$부터 $\binom p {p-1}$까지 모두 p를 인수로 가진다는 것을 알 수 있다. 이는 $\pmod p$연산을 적용하면 초항과 마지막 항을 제외하고는 모든 항이 제거된다.</p> <p>정리하면</p> \[(1+x)^p \equiv 1 + x^p \pmod p\] <p>위 합동으로 해당 명제가 성립한다.</p> \[(1+x)^{p^{n+1}} = ((1+x)^p)^{p^n} \equiv 1 + x^p \pmod p\] <p>위 식 역시 귀납적으로 정의 될 수 있으며 해당 명제가 성립한다.</p> <p><br/></p> <h5 id="2-뤼카의-정리-증명">2. 뤼카의 정리 증명</h5> <p>이를 이용해서 다음과 같이 전개가 가능하다.</p> \[\sum_{n=0}^{m} \binom m n x^n \equiv (1+x)^m \equiv \prod_{i=0}^{k} \left[(1+x)^{p^i} \right]^{m_i} \equiv \prod_{i=0}^{k} \left[ 1+x^{p^i} \right]^{m_i} \pmod p\] <p>다시 이항 정리를 써서 안쪽의 식을 풀어내면,</p> \[\equiv \prod_{i=0}^k \left[ \sum_{{n_i}=0}^{m_i} \binom {m_i} {n_i} {x^{n_ip^i}} \right] \equiv \sum_{n=0}^m \left[ \prod_{i=0}^k \binom {m_i}{n_i} \right] x^n \pmod p\] <p>이 된다. 모든 차수마다 계수는 같으므로 위 뤼카의 정리가 성립하게 된다.</p>]]></content><author><name></name></author><category term="theorem"/><category term="theorem"/><summary type="html"><![CDATA[뤼카의 정리]]></summary></entry><entry><title type="html">BOJ 1210 마피아 (Python)</title><link href="https://oweixx.github.io/blog/2025/BOJ1210/" rel="alternate" type="text/html" title="BOJ 1210 마피아 (Python)"/><published>2025-03-23T00:00:00+00:00</published><updated>2025-03-23T00:00:00+00:00</updated><id>https://oweixx.github.io/blog/2025/BOJ1210</id><content type="html" xml:base="https://oweixx.github.io/blog/2025/BOJ1210/"><![CDATA[<h4 id="접근">접근</h4> <p>3번째 조건 <code class="language-plaintext highlighter-rouge">우리의 점거된 톨게이트를 지나지 않고서는</code> 을 보았을 때 최대유량의 최소컷 정리를 떠올릴 수 있었다.</p> <p>최소컷 정리에 의하여 그래프 노드가 Source쪽과 Sink쪽으로 나눠 질 수 있는 후보군들을 찾으면 된다.</p> <p>양방향 간선이므로 정점 분할을 해주고 최대유량을 흘려보내준다.</p> <p>이후에는 들어올 순 있지만 나갈수는 없는 간선 즉, bfs를 통해 Source로부터 시작하였을 때 check[i]는 가능하지만 check[n+i]는 불가능한 톨게이트 번호를 뽑아준다.</p> <h4 id="code">code</h4> <hr/> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">sys</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">()</span> <span class="p">:</span>
    <span class="k">global</span> <span class="n">level</span>
    <span class="n">q</span> <span class="o">=</span> <span class="nf">deque</span><span class="p">([</span><span class="n">source</span><span class="p">])</span>
    <span class="n">level</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>
    <span class="n">level</span><span class="p">[</span><span class="n">source</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">q</span> <span class="p">:</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">popleft</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">nx</span> <span class="ow">in</span> <span class="n">g</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="p">:</span>
            <span class="k">if</span> <span class="n">c</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">nx</span><span class="p">]</span> <span class="o">-</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">nx</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">level</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">:</span>
                <span class="n">level</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span> <span class="o">=</span> <span class="n">level</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="n">q</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">nx</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">level</span><span class="p">[</span><span class="n">sink</span><span class="p">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>

<span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">flow</span><span class="p">)</span> <span class="p">:</span>
    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">sink</span> <span class="p">:</span>
        <span class="k">return</span> <span class="n">flow</span>
    
    <span class="k">while</span> <span class="n">work</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">g</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="p">:</span>
        <span class="n">nx</span> <span class="o">=</span> <span class="n">g</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">work</span><span class="p">[</span><span class="n">x</span><span class="p">]]</span>
        <span class="k">if</span> <span class="n">c</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">nx</span><span class="p">]</span> <span class="o">-</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">nx</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">level</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">level</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span> <span class="p">:</span>
            <span class="n">min_flow</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">nx</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="n">flow</span><span class="p">,</span> <span class="n">c</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">nx</span><span class="p">]</span> <span class="o">-</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">nx</span><span class="p">]))</span>
            <span class="k">if</span> <span class="n">min_flow</span> <span class="p">:</span>
                <span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">nx</span><span class="p">]</span> <span class="o">+=</span> <span class="n">min_flow</span>
                <span class="n">f</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">-=</span> <span class="n">min_flow</span>
                <span class="k">return</span> <span class="n">min_flow</span>
        <span class="n">work</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="mi">0</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
<span class="n">s</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
<span class="n">cost</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="n">k</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">4</span><span class="p">;</span> <span class="n">sink</span> <span class="o">=</span> <span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">source</span> <span class="o">=</span> <span class="n">k</span><span class="o">-</span><span class="mi">2</span>

<span class="n">g</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>
<span class="n">c</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>
<span class="n">f</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>
<span class="n">level</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>
<span class="n">work</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>

<span class="n">g</span><span class="p">[</span><span class="n">source</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">s</span><span class="p">);</span> 
<span class="n">g</span><span class="p">[</span><span class="n">s</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
<span class="n">c</span><span class="p">[</span><span class="n">source</span><span class="p">][</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1e9</span>

<span class="n">g</span><span class="p">[</span><span class="n">n</span><span class="o">+</span><span class="n">e</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">sink</span><span class="p">);</span> 
<span class="n">g</span><span class="p">[</span><span class="n">sink</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="n">e</span><span class="p">)</span>
<span class="n">c</span><span class="p">[</span><span class="n">n</span><span class="o">+</span><span class="n">e</span><span class="p">][</span><span class="n">sink</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1e9</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">)</span>
    <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">cost</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
    <span class="n">g</span><span class="p">[</span><span class="n">a</span><span class="o">+</span><span class="n">n</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="n">g</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">n</span><span class="p">)</span>
    <span class="n">c</span><span class="p">[</span><span class="n">a</span><span class="o">+</span><span class="n">n</span><span class="p">][</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1e9</span>
    
    <span class="n">g</span><span class="p">[</span><span class="n">b</span><span class="o">+</span><span class="n">n</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">g</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">b</span><span class="o">+</span><span class="n">n</span><span class="p">)</span>
    <span class="n">c</span><span class="p">[</span><span class="n">b</span><span class="o">+</span><span class="n">n</span><span class="p">][</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1e9</span>


<span class="k">while</span> <span class="nf">bfs</span><span class="p">()</span> <span class="p">:</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">work</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>
    <span class="k">while</span> <span class="bp">True</span> <span class="p">:</span>
        <span class="n">mf</span> <span class="o">=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="mf">1e12</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">mf</span> <span class="p">:</span>
            <span class="k">break</span>
        <span class="n">ans</span> <span class="o">+=</span> <span class="n">mf</span>

<span class="n">check</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>
<span class="n">q</span> <span class="o">=</span> <span class="nf">deque</span><span class="p">([</span><span class="n">source</span><span class="p">])</span>
<span class="n">check</span><span class="p">[</span><span class="n">source</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

<span class="k">while</span> <span class="n">q</span> <span class="p">:</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">popleft</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">nx</span> <span class="ow">in</span> <span class="n">g</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="p">:</span>
        <span class="k">if</span> <span class="n">c</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">nx</span><span class="p">]</span> <span class="o">-</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">nx</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">check</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span> <span class="p">:</span>
            <span class="n">check</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="n">q</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">nx</span><span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
    <span class="k">if</span> <span class="n">check</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">check</span><span class="p">[</span><span class="n">n</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="p">:</span>
        <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="o">*</span><span class="n">result</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="PS"/><category term="PS"/><category term="최대유량"/><category term="최소컷"/><summary type="html"><![CDATA[BOJ 1210 마피아 (Python)]]></summary></entry></feed>